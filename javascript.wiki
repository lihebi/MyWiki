= Javascript =
[[index|首页]]
%toc
== Libs ==
* [[sly]]: one-directional scrolling with item based navigation support
* jquery.easing: 提供各种动画效果。
* [[waypoint]]: execute a function whenever you scroll to an element.
* spin: create a spin(wait for load)
* [[SmoothScroll]]
* viewport

== TIPS ==
* === 全等，值和类型

{{{class="brush: js"
xxx || xxx //左侧的值为真则返回之，为假则返回右侧
xxx && xxx //左侧的值为假则返回之，为真则返回右侧
}}}
* highlight
	* syntaxhighlighter
	* google-code-prettify
* 获取页面的高度，宽度
{{{class="brush: js"
document.documentElement.clientHeight
$(window).width()
}}}

== 内置函数 ==
* Date() ===> Fri Mar 07 2014 11:23:53 GMT+0800 (CST)
* window.location.pathname ==> /login



== 语法 ==
=== 变量 ===
{{{class="brush: js"
var x; //x=undefined
x = 5;
var x; //重复声明无任何效果
var x="bill"; //x变成字符串
var x=123e-5;
var x=true;
var y=false;
y = null; //clear y

var z = new String; //声明新变量时顺便声明类型。String, Number, Boolean, Array, Object

globalVar = "global"; //赋值给未声明的变量，该变量被自动作为全局变量声明，即使它在函数内执行。
}}}

=== 数组 ===
{{{class="brush: js"
var array = new Array();
array[0] = "aaa";
array[1] = "bbb";

var array2 = new Array("aaa", "bbb");

var array3 = ["aaa", "bbb", "ccc"];

array.length
}}}

=== 对象 ===
{{{class="brush: js"
var obj = {firstname: "Hebi", lastname: "Li", id: 123};
obj.lastname;
obj["lastname"];

var person = new Object();
person.firstname="Hebi";
person.lastname="Li";
person.id=123;

function PersonConstructor(firstname, lastname, id)
{
	this.firstname = firstname;
	this.lastname = lastname;
	this.id = id;
}
person2 = new PersonConstructor("Hebi", "Li", 123);

for (x in person)
{
	person[x];
}
}}}

=== 字符串 ===
{{{class="brush: js"
var s = "lalala";
s.length;

s.indexof();
s.replace();
s.search();

var s1="111";
var s2="222";
var s3 = s1+" "+s2; //字符串可以直接加

//"5"+5 ===> "55"
}}}

=== try catch throw ===
{{{class="brush: js"
try {
	if (xx) throw "err1"; //异常可以是string, number, boolean, object
	if (yy) throw "err2";
} catch (err) {
	alert(err);
}
}}}

== HTML Related ==

{{{class="brush: html"
<p id="lihebi"> xxx </p>
<script type="text/javascript">
document.write("<h1>xxx</h1>"); //只能在html输出流中使用。若文档已经加载后使用（如在函数中），会覆盖整个文档。
function func() {
    //getElementById
    x = document.getElementById("lihebi");
    //innerHTML
    x.innerHTML = "yyy";
    //语法： element.style.[property]
    x.style.color = "#ff0000";
}
function func2() {
    element = document.getElementById("lihebi");
    //element.[attribute]来操作元素属性。src是一个属性。src是字符串，而match是字符串的方法。
    if (element.src.match("img1")) //部分匹配即可
        element.src="theimg2.gif";
    else
        element.src="theimg1.gif";
}
</script>
<button type="button" onclick="func()">Button</button>
<!-- 任何东西都可以onclick -->
<button type="button" onclick="alert('xxx')">Button</button>
<img id="lihebi" onclick="func()" src="theimg1.gif">
}}}

=== element.value ===
{{{class="brush: html"
<input id="lihebi" type="text"/>
<script type="text/javascript">
function func()
{
	e = document.getElementById("lihebi"); //HTMLInputElement
	x = e.value; //string
}
</script>
}}}

=== getElementByTagName ===
{{{class="brush:html"
<div id="lihebi">
<p>111</p>
<p>222</p>
</div>
<script>
var x = document.getElementById("main"); //object HTMLDivElement
var y = x.getElementByTagName("p"); //object NodeList; 即使只有一个<p>也是
y[0].innerHTML;
}}}

== OnXXX ==

* onmouseover & onmouseout
* this
{{{class="brush: html"
<div onmouseover="mOver(this)" onmouseout="mOut(this)">aaa</div>
<script>
function mOver(obj) {obj.innerHTML="bbb";}
function mOut(obj) {obj.innerHTML="ccc";}
</script>
}}}

* onmousedown & onmouseup & onclick
鼠标按下，放开，整个过程叫点击
{{{class="brush: html"
<div onmousedown="mDown(this)" onmouseup="mUp(this)">aaa</div>
<script>
function mDown(obj) { obj.innerHTML="bbb";}
function mUp(obj) { obj.innerHTML="ccc";}
</script>
}}}

* onchange
{{{class="brush: html"
<input type="text" id="lihebi" onchange="func()"> //focus离开输入框后会触发
<script>
function func()
{
	var x=document.getElementById("lihebi");
	x.value = x.value.toUpperCase(); //设置文本框内容;字符串toUpperCase方法
}
</script>
}}}

* onload & onunload
在用户进入或离开页面时触发。常见用法：判断浏览器类型，版本，处理cookie
{{{class="brush: html"
<body onload="func();">
</body>
}}}

== DOM ==

* 添加和删除DOM节点
{{{class="brush: html"
<div id="lihebi">
<p id="p1">111111</p>
<p id="p2">222222</p>
</div>

<script>
var newp = document.createElement("p");
var txt = document.createTextNode("33333");
newp.appendChild(txt);

var element = document.getElementById("lihebi");
element.appendChild(newp); //接在最后

var parent = document.getElementById("lihebi");
var child = document.getElementById("p2");
parent.removeChild(child); //必须知道要删除的元素和它的父节点

child.parentNode.removeChild(child); //常用方法

</script>
}}}





